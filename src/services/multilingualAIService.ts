interface LanguageConfig {
  code: string;
  name: string;
  flag: string;
  speechCode: string;
  voiceNames: string[];
  greetings: {
    welcome: string;
    reservation: string;
    checkin: string;
    checkout: string;
    roomAvailability: string;
  };
  prompts: {
    dates: string;
    guests: string;
    roomType: string;
    guestInfo: string;
    payment: string;
    confirmation: string;
  };
  responses: {
    dateConfirm: string;
    roomSelected: string;
    infoReceived: string;
    paymentSet: string;
    bookingConfirmed: string;
    error: string;
    help: string;
  };
}

export const languageConfigs: Record<string, LanguageConfig> = {
  en: {
    code: 'en',
    name: 'English',
    flag: 'üá∫üá∏',
    speechCode: 'en-US',
    voiceNames: ['Google US English', 'Microsoft Zira', 'Alex'],
    greetings: {
      welcome: 'Welcome to Lagunacreek Resort & Spa! I can help you with reservations, check-in, check-out, and room availability. How can I assist you today?',
      reservation: 'I\'ll help you make a reservation. Please tell me your check-in date, check-out date, and number of guests.',
      checkin: 'I\'ll help you check in. Please provide your confirmation number or name.',
      checkout: 'I\'ll help you check out. Let me review your folio and charges.',
      roomAvailability: 'I\'ll check room availability for you. What dates are you looking for?'
    },
    prompts: {
      dates: 'Please tell me your check-in and check-out dates.',
      guests: 'How many adults and children will be staying?',
      roomType: 'Which room type would you prefer? We have Ocean View King Suite, Deluxe Garden Room, or Family Oceanfront Suite.',
      guestInfo: 'Please provide your full name, phone number, and email address.',
      payment: 'How would you like to pay? Credit card, pay at hotel, or digital wallet?',
      confirmation: 'Please review your booking details and say "confirm" to complete your reservation.'
    },
    responses: {
      dateConfirm: 'Got it. Check-in: {checkin}, Check-out: {checkout}.',
      roomSelected: '{roomType} selected at ${price} per night.',
      infoReceived: 'Thank you. I have your information.',
      paymentSet: '{paymentMethod} selected.',
      bookingConfirmed: 'Your booking is confirmed! Confirmation number: {confirmationId}',
      error: 'I didn\'t understand that. Could you please repeat?',
      help: 'I can help you with reservations, check-in, check-out, and room availability. Just tell me what you need.'
    }
  },
  es: {
    code: 'es',
    name: 'Espa√±ol',
    flag: 'üá™üá∏',
    speechCode: 'es-ES',
    voiceNames: ['Google espa√±ol', 'Microsoft Helena', 'M√≥nica'],
    greetings: {
      welcome: '¬°Bienvenido a Lagunacreek Resort & Spa! Puedo ayudarte con reservas, check-in, check-out y disponibilidad de habitaciones. ¬øC√≥mo puedo asistirte hoy?',
      reservation: 'Te ayudar√© a hacer una reserva. Por favor dime tu fecha de entrada, fecha de salida y n√∫mero de hu√©spedes.',
      checkin: 'Te ayudar√© con el check-in. Por favor proporciona tu n√∫mero de confirmaci√≥n o nombre.',
      checkout: 'Te ayudar√© con el check-out. D√©jame revisar tu cuenta y cargos.',
      roomAvailability: 'Verificar√© la disponibilidad de habitaciones para ti. ¬øQu√© fechas buscas?'
    },
    prompts: {
      dates: 'Por favor dime tus fechas de entrada y salida.',
      guests: '¬øCu√°ntos adultos y ni√±os se hospedar√°n?',
      roomType: '¬øQu√© tipo de habitaci√≥n prefieres? Tenemos Suite King Vista al Mar, Habitaci√≥n Deluxe Garden, o Suite Familiar Frente al Mar.',
      guestInfo: 'Por favor proporciona tu nombre completo, n√∫mero de tel√©fono y direcci√≥n de email.',
      payment: '¬øC√≥mo te gustar√≠a pagar? Tarjeta de cr√©dito, pagar en el hotel, o billetera digital?',
      confirmation: 'Por favor revisa los detalles de tu reserva y di "confirmar" para completar tu reservaci√≥n.'
    },
    responses: {
      dateConfirm: 'Entendido. Entrada: {checkin}, Salida: {checkout}.',
      roomSelected: '{roomType} seleccionada a ${price} por noche.',
      infoReceived: 'Gracias. Tengo tu informaci√≥n.',
      paymentSet: '{paymentMethod} seleccionado.',
      bookingConfirmed: '¬°Tu reserva est√° confirmada! N√∫mero de confirmaci√≥n: {confirmationId}',
      error: 'No entend√≠ eso. ¬øPodr√≠as repetir por favor?',
      help: 'Puedo ayudarte con reservas, check-in, check-out y disponibilidad de habitaciones. Solo dime qu√© necesitas.'
    }
  },
  hi: {
    code: 'hi',
    name: '‡§π‡§ø‡§Ç‡§¶‡•Ä',
    flag: 'üáÆüá≥',
    speechCode: 'hi-IN',
    voiceNames: ['Google ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', 'Microsoft Hemant', 'Kalpana'],
    greetings: {
      welcome: '‡§≤‡§ó‡•Å‡§®‡§æ‡§ï‡•ç‡§∞‡•Ä‡§ï ‡§∞‡§ø‡§∏‡•â‡§∞‡•ç‡§ü ‡§è‡§Ç‡§° ‡§∏‡•ç‡§™‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó, ‡§ö‡•á‡§ï-‡§á‡§®, ‡§ö‡•á‡§ï-‡§Ü‡§â‡§ü ‡§î‡§∞ ‡§ï‡§Æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?',
      reservation: '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§ö‡•á‡§ï-‡§á‡§® ‡§§‡§æ‡§∞‡•Ä‡§ñ, ‡§ö‡•á‡§ï-‡§Ü‡§â‡§ü ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§î‡§∞ ‡§Æ‡•á‡§π‡§Æ‡§æ‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§',
      checkin: '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ö‡•á‡§ï-‡§á‡§® ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ‡•á‡§∂‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§Ø‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§',
      checkout: '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ö‡•á‡§ï-‡§Ü‡§â‡§ü ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡§æ ‡§¨‡§ø‡§≤ ‡§î‡§∞ ‡§ö‡§æ‡§∞‡•ç‡§ú‡•á‡§∏ ‡§¶‡•á‡§ñ‡§®‡•á ‡§¶‡•á‡§Ç‡•§',
      roomAvailability: '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§Æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ ‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ‡•á‡§Ç ‡§¶‡•á‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?'
    },
    prompts: {
      dates: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§ö‡•á‡§ï-‡§á‡§® ‡§î‡§∞ ‡§ö‡•á‡§ï-‡§Ü‡§â‡§ü ‡§§‡§æ‡§∞‡•Ä‡§ñ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç‡•§',
      guests: '‡§ï‡§ø‡§§‡§®‡•á ‡§µ‡§Ø‡§∏‡•ç‡§ï ‡§î‡§∞ ‡§¨‡§ö‡•ç‡§ö‡•á ‡§∞‡•Å‡§ï‡•á‡§Ç‡§ó‡•á?',
      roomType: '‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡§æ ‡§ï‡§Æ‡§∞‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á? ‡§π‡§Æ‡§æ‡§∞‡•á ‡§™‡§æ‡§∏ ‡§ì‡§∂‡§® ‡§µ‡•ç‡§Ø‡•Ç ‡§ï‡§ø‡§Ç‡§ó ‡§∏‡•Ç‡§ü, ‡§°‡•Ä‡§≤‡§ï‡•ç‡§∏ ‡§ó‡§æ‡§∞‡•ç‡§°‡§® ‡§∞‡•Ç‡§Æ, ‡§Ø‡§æ ‡§´‡•à‡§Æ‡§ø‡§≤‡•Ä ‡§ì‡§∂‡§®‡§´‡•ç‡§∞‡§Ç‡§ü ‡§∏‡•Ç‡§ü ‡§π‡•à‡•§',
      guestInfo: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ, ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§î‡§∞ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§',
      payment: '‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§°, ‡§π‡•ã‡§ü‡§≤ ‡§Æ‡•á‡§Ç ‡§≠‡•Å‡§ó‡§§‡§æ‡§®, ‡§Ø‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§µ‡•â‡§≤‡•á‡§ü?',
      confirmation: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡§æ ‡§Ü‡§∞‡§ï‡•ç‡§∑‡§£ ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è "‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ" ‡§ï‡§π‡•á‡§Ç‡•§'
    },
    responses: {
      dateConfirm: '‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ‡•§ ‡§ö‡•á‡§ï-‡§á‡§®: {checkin}, ‡§ö‡•á‡§ï-‡§Ü‡§â‡§ü: {checkout}‡•§',
      roomSelected: '{roomType} ‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ ${price} ‡§™‡•ç‡§∞‡§§‡§ø ‡§∞‡§æ‡§§‡•§',
      infoReceived: '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§π‡•à‡•§',
      paymentSet: '{paymentMethod} ‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ‡•§',
      bookingConfirmed: '‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ ‡§π‡•ã ‡§ó‡§à! ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ‡•á‡§∂‡§® ‡§®‡§Ç‡§¨‡§∞: {confirmationId}',
      error: '‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡§π‡•á‡§Ç?',
      help: '‡§Æ‡•à‡§Ç ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó, ‡§ö‡•á‡§ï-‡§á‡§®, ‡§ö‡•á‡§ï-‡§Ü‡§â‡§ü ‡§î‡§∞ ‡§ï‡§Æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§¨‡§∏ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§'
    }
  },
  fr: {
    code: 'fr',
    name: 'Fran√ßais',
    flag: 'üá´üá∑',
    speechCode: 'fr-FR',
    voiceNames: ['Google fran√ßais', 'Microsoft Julie', 'Am√©lie'],
    greetings: {
      welcome: 'Bienvenue au Lagunacreek Resort & Spa! Je peux vous aider avec les r√©servations, l\'enregistrement, le d√©part et la disponibilit√© des chambres. Comment puis-je vous aider aujourd\'hui?',
      reservation: 'Je vais vous aider √† faire une r√©servation. Veuillez me dire votre date d\'arriv√©e, date de d√©part et nombre d\'invit√©s.',
      checkin: 'Je vais vous aider avec l\'enregistrement. Veuillez fournir votre num√©ro de confirmation ou nom.',
      checkout: 'Je vais vous aider avec le d√©part. Laissez-moi examiner votre facture et frais.',
      roomAvailability: 'Je vais v√©rifier la disponibilit√© des chambres pour vous. Quelles dates recherchez-vous?'
    },
    prompts: {
      dates: 'Veuillez me dire vos dates d\'arriv√©e et de d√©part.',
      guests: 'Combien d\'adultes et d\'enfants s√©journeront?',
      roomType: 'Quel type de chambre pr√©f√©rez-vous? Nous avons Suite King Vue Oc√©an, Chambre Deluxe Garden, ou Suite Familiale Front de Mer.',
      guestInfo: 'Veuillez fournir votre nom complet, num√©ro de t√©l√©phone et adresse email.',
      payment: 'Comment souhaitez-vous payer? Carte de cr√©dit, payer √† l\'h√¥tel, ou portefeuille num√©rique?',
      confirmation: 'Veuillez examiner les d√©tails de votre r√©servation et dire "confirmer" pour compl√©ter votre r√©servation.'
    },
    responses: {
      dateConfirm: 'Compris. Arriv√©e: {checkin}, D√©part: {checkout}.',
      roomSelected: '{roomType} s√©lectionn√©e √† ${price} par nuit.',
      infoReceived: 'Merci. J\'ai vos informations.',
      paymentSet: '{paymentMethod} s√©lectionn√©.',
      bookingConfirmed: 'Votre r√©servation est confirm√©e! Num√©ro de confirmation: {confirmationId}',
      error: 'Je n\'ai pas compris. Pourriez-vous r√©p√©ter s\'il vous pla√Æt?',
      help: 'Je peux vous aider avec les r√©servations, l\'enregistrement, le d√©part et la disponibilit√© des chambres. Dites-moi simplement ce dont vous avez besoin.'
    }
  },
  de: {
    code: 'de',
    name: 'Deutsch',
    flag: 'üá©üá™',
    speechCode: 'de-DE',
    voiceNames: ['Google Deutsch', 'Microsoft Katja', 'Anna'],
    greetings: {
      welcome: 'Willkommen im Lagunacreek Resort & Spa! Ich kann Ihnen bei Reservierungen, Check-in, Check-out und Zimmerverf√ºgbarkeit helfen. Wie kann ich Ihnen heute helfen?',
      reservation: 'Ich helfe Ihnen bei einer Reservierung. Bitte teilen Sie mir Ihr Anreise-, Abreisedatum und die Anzahl der G√§ste mit.',
      checkin: 'Ich helfe Ihnen beim Check-in. Bitte geben Sie Ihre Best√§tigungsnummer oder Ihren Namen an.',
      checkout: 'Ich helfe Ihnen beim Check-out. Lassen Sie mich Ihre Rechnung und Geb√ºhren √ºberpr√ºfen.',
      roomAvailability: 'Ich √ºberpr√ºfe die Zimmerverf√ºgbarkeit f√ºr Sie. Welche Daten suchen Sie?'
    },
    prompts: {
      dates: 'Bitte teilen Sie mir Ihre Anreise- und Abreisedaten mit.',
      guests: 'Wie viele Erwachsene und Kinder werden √ºbernachten?',
      roomType: 'Welchen Zimmertyp bevorzugen Sie? Wir haben Ocean View King Suite, Deluxe Garden Room oder Family Oceanfront Suite.',
      guestInfo: 'Bitte geben Sie Ihren vollst√§ndigen Namen, Telefonnummer und E-Mail-Adresse an.',
      payment: 'Wie m√∂chten Sie bezahlen? Kreditkarte, im Hotel bezahlen oder digitale Geldb√∂rse?',
      confirmation: 'Bitte √ºberpr√ºfen Sie Ihre Buchungsdetails und sagen Sie "best√§tigen", um Ihre Reservierung abzuschlie√üen.'
    },
    responses: {
      dateConfirm: 'Verstanden. Anreise: {checkin}, Abreise: {checkout}.',
      roomSelected: '{roomType} ausgew√§hlt f√ºr ${price} pro Nacht.',
      infoReceived: 'Danke. Ich habe Ihre Informationen.',
      paymentSet: '{paymentMethod} ausgew√§hlt.',
      bookingConfirmed: 'Ihre Buchung ist best√§tigt! Best√§tigungsnummer: {confirmationId}',
      error: 'Das habe ich nicht verstanden. K√∂nnten Sie das bitte wiederholen?',
      help: 'Ich kann Ihnen bei Reservierungen, Check-in, Check-out und Zimmerverf√ºgbarkeit helfen. Sagen Sie mir einfach, was Sie brauchen.'
    }
  }
};

class MultilingualAIService {
  private currentLanguage: string = 'en';
  private currentVoice: SpeechSynthesisVoice | null = null;
  private availableVoices: SpeechSynthesisVoice[] = [];

  constructor() {
    this.initializeVoices();
  }

  private initializeVoices() {
    if ('speechSynthesis' in window) {
      const loadVoices = () => {
        this.availableVoices = speechSynthesis.getVoices();
        this.setVoiceForLanguage(this.currentLanguage);
      };

      loadVoices();
      speechSynthesis.onvoiceschanged = loadVoices;
    }
  }

  public setLanguage(languageCode: string) {
    if (languageConfigs[languageCode]) {
      this.currentLanguage = languageCode;
      this.setVoiceForLanguage(languageCode);
    }
  }

  private setVoiceForLanguage(languageCode: string) {
    const config = languageConfigs[languageCode];
    if (!config) return;

    // Find the best voice for this language
    const preferredVoice = this.availableVoices.find(voice => 
      voice.lang.startsWith(config.speechCode) || 
      config.voiceNames.some(name => voice.name.includes(name))
    );

    if (preferredVoice) {
      this.currentVoice = preferredVoice;
    } else {
      // Fallback to any voice that matches the language code
      this.currentVoice = this.availableVoices.find(voice => 
        voice.lang.startsWith(languageCode)
      ) || null;
    }
  }

  public speak(text: string, languageCode?: string): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!('speechSynthesis' in window)) {
        reject(new Error('Speech synthesis not supported'));
        return;
      }

      const lang = languageCode || this.currentLanguage;
      const utterance = new SpeechSynthesisUtterance(text);
      
      if (this.currentVoice && this.currentVoice.lang.startsWith(lang)) {
        utterance.voice = this.currentVoice;
      }
      
      utterance.lang = languageConfigs[lang]?.speechCode || 'en-US';
      utterance.rate = 0.9;
      utterance.pitch = 1;
      utterance.volume = 1;

      utterance.onend = () => resolve();
      utterance.onerror = (event) => reject(event.error);

      speechSynthesis.speak(utterance);
    });
  }

  public getGreeting(type: keyof LanguageConfig['greetings']): string {
    const config = languageConfigs[this.currentLanguage];
    return config?.greetings[type] || languageConfigs.en.greetings[type];
  }

  public getPrompt(type: keyof LanguageConfig['prompts']): string {
    const config = languageConfigs[this.currentLanguage];
    return config?.prompts[type] || languageConfigs.en.prompts[type];
  }

  public getResponse(type: keyof LanguageConfig['responses'], variables?: Record<string, string>): string {
    const config = languageConfigs[this.currentLanguage];
    let response = config?.responses[type] || languageConfigs.en.responses[type];
    
    if (variables) {
      Object.entries(variables).forEach(([key, value]) => {
        response = response.replace(`{${key}}`, value);
      });
    }
    
    return response;
  }

  public getSpeechRecognitionLanguage(): string {
    const config = languageConfigs[this.currentLanguage];
    return config?.speechCode || 'en-US';
  }

  public getCurrentLanguage(): string {
    return this.currentLanguage;
  }

  public getAvailableLanguages(): Array<{code: string, name: string, flag: string}> {
    return Object.values(languageConfigs).map(config => ({
      code: config.code,
      name: config.name,
      flag: config.flag
    }));
  }

  public getLanguageInfo(code: string): {code: string, name: string, flag: string, nativeName?: string} {
    const config = languageConfigs[code];
    const nativeNames: Record<string, string> = {
      'en': 'English',
      'es': 'Espa√±ol', 
      'hi': '‡§π‡§ø‡§Ç‡§¶‡•Ä',
      'fr': 'Fran√ßais',
      'de': 'Deutsch'
    };
    
    return {
      code: config?.code || 'en',
      name: config?.name || 'English',
      flag: config?.flag || 'üá∫üá∏',
      nativeName: nativeNames[code] || 'English'
    };
  }

  public detectLanguageFromText(text: string): string {
    // Simple language detection based on common words/patterns
    const lowerText = text.toLowerCase();
    
    if (/\b(hola|gracias|por favor|habitaci√≥n|reserva)\b/.test(lowerText)) return 'es';
    if (/\b(‡§®‡§Æ‡§∏‡•ç‡§§‡•á|‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶|‡§ï‡§Æ‡§∞‡§æ|‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó)\b/.test(lowerText)) return 'hi';
    if (/\b(bonjour|merci|chambre|r√©servation)\b/.test(lowerText)) return 'fr';
    if (/\b(hallo|danke|zimmer|reservierung)\b/.test(lowerText)) return 'de';
    
    return 'en'; // Default to English
  }
}

export const multilingualAI = new MultilingualAIService();